<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 谷中仁的博客</title><link>https://guzhongren.github.io/posts/</link><description>Recent content in Posts on 谷中仁的博客</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 16 Apr 2020 22:56:55 +0800</lastBuildDate><atom:link href="https://guzhongren.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Rust Doc小记</title><link>https://guzhongren.github.io/2020/04/rust-doc%E5%B0%8F%E8%AE%B0/</link><pubDate>Thu, 16 Apr 2020 22:56:55 +0800</pubDate><guid>https://guzhongren.github.io/2020/04/rust-doc%E5%B0%8F%E8%AE%B0/</guid><description>前言 学习Rust肯定离不开查看其官方或者第三方开发者的文档，而在Rust 的crate中，对于开发者或者使用者，文档是非常友好的。在这就不举例</description></item><item><title>我的知识图谱</title><link>https://guzhongren.github.io/2020/04/%E6%88%91%E7%9A%84%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/</link><pubDate>Wed, 08 Apr 2020 22:23:46 +0800</pubDate><guid>https://guzhongren.github.io/2020/04/%E6%88%91%E7%9A%84%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/</guid><description>插曲 去年与前ThoughtWorks 咨询师 李小波的一次线下交流中，学习到了总结知识的一点技巧，非常受用，并且在交流后得到了小波老西自己整理的</description></item><item><title>Rust中闭包的写法</title><link>https://guzhongren.github.io/2020/04/rust%E4%B8%AD%E9%97%AD%E5%8C%85%E7%9A%84%E5%86%99%E6%B3%95/</link><pubDate>Tue, 07 Apr 2020 22:26:14 +0800</pubDate><guid>https://guzhongren.github.io/2020/04/rust%E4%B8%AD%E9%97%AD%E5%8C%85%E7%9A%84%E5%86%99%E6%B3%95/</guid><description>在鲁迅的文章《孔乙己》中说，茴香豆的茴字有好几种写法，记得没错的话应该是四种，具体哪四种请参考下文引用。 在Rust 中，闭包也有好几种写法，今</description></item><item><title>调试bash</title><link>https://guzhongren.github.io/2020/04/%E8%B0%83%E8%AF%95bash/</link><pubDate>Mon, 06 Apr 2020 23:09:54 +0800</pubDate><guid>https://guzhongren.github.io/2020/04/%E8%B0%83%E8%AF%95bash/</guid><description>最近在做 DevOps 的工作，主要是做一个蓝绿部署的方案，在这部分中涉及到了写 shell， Shell 作为一种程序语言，那么对于开发人员肯定是要在部署到正式或者生</description></item><item><title>设计评审文档指南</title><link>https://guzhongren.github.io/2020/04/%E8%AE%BE%E8%AE%A1%E8%AF%84%E5%AE%A1%E6%96%87%E6%A1%A3%E6%8C%87%E5%8D%97/</link><pubDate>Sat, 04 Apr 2020 18:04:42 +0800</pubDate><guid>https://guzhongren.github.io/2020/04/%E8%AE%BE%E8%AE%A1%E8%AF%84%E5%AE%A1%E6%96%87%E6%A1%A3%E6%8C%87%E5%8D%97/</guid><description>一句话的分量是否重，是要看能不能击中听者的痛点。 设计评审过程中，需要各种文档或者其他资料来辅助，在此总结一番，以供后续查阅。 产品PRD：当有</description></item><item><title>开发眼中的TDD</title><link>https://guzhongren.github.io/2020/04/%E5%BC%80%E5%8F%91%E7%9C%BC%E4%B8%AD%E7%9A%84tdd/</link><pubDate>Thu, 02 Apr 2020 21:56:36 +0800</pubDate><guid>https://guzhongren.github.io/2020/04/%E5%BC%80%E5%8F%91%E7%9C%BC%E4%B8%AD%E7%9A%84tdd/</guid><description>本思维导图中大部分内容由@haihaio 完成。 此思维导图中总结了TDD 的概念，原则，套路，案例及策略等，不失为一份很好的学习资料。 项目地址:</description></item><item><title>我的Mac上常用的软件</title><link>https://guzhongren.github.io/2020/04/%E6%88%91%E7%9A%84mac%E4%B8%8A%E5%B8%B8%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6/</link><pubDate>Wed, 01 Apr 2020 21:04:11 +0800</pubDate><guid>https://guzhongren.github.io/2020/04/%E6%88%91%E7%9A%84mac%E4%B8%8A%E5%B8%B8%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6/</guid><description>软件常用常新，软件大多的目的都是效率，办公，沟通，和娱乐等。虽说Mac 也有自己的时间机器，可以随时将新机器回复到旧机器上，但是作为分享和传播</description></item><item><title>How to Host an English Standup Meeting</title><link>https://guzhongren.github.io/2020/03/how-to-host-an-english-standup-meeting/</link><pubDate>Sun, 15 Mar 2020 10:28:25 +0800</pubDate><guid>https://guzhongren.github.io/2020/03/how-to-host-an-english-standup-meeting/</guid><description>场景 最近上了澳洲的项目，项目组9个人，我们的站会是每周有一个人来轮流主持，每天早上10点，在Teams上与澳洲的客户一起面对Jira看板进行</description></item><item><title>Config Yarn to Use Private Package</title><link>https://guzhongren.github.io/2020/03/config-yarn-to-use-private-package/</link><pubDate>Thu, 05 Mar 2020 22:45:03 +0800</pubDate><guid>https://guzhongren.github.io/2020/03/config-yarn-to-use-private-package/</guid><description>Photo by Jeffrey Czum from Pexels 场景 在公网上我们获取 npm 包的时候直接就用下面的命令就可以了 1 2 3 $ npm install xxx $ # 或者 # yarn add xxx 但是有时候，公司内部开发的工具库只想放在公</description></item><item><title>Build My Blog With Hugo</title><link>https://guzhongren.github.io/2020/02/build-my-blog-with-hugo/</link><pubDate>Sun, 23 Feb 2020 18:17:51 +0800</pubDate><guid>https://guzhongren.github.io/2020/02/build-my-blog-with-hugo/</guid><description>Photo by Daniel Ap from Pexels Overview Hugo是一款基于 golang 实现的静态网站生成器。以其简单、易用、高效、易扩展、快速部署受到开发者的喜爱，比起Hexo 感觉更轻便。下图</description></item><item><title>Version Management Strategy</title><link>https://guzhongren.github.io/2020/02/version-management-strategy/</link><pubDate>Sun, 23 Feb 2020 11:11:22 +0800</pubDate><guid>https://guzhongren.github.io/2020/02/version-management-strategy/</guid><description>Photo by Matheus Natan from Pexels 为了开发高质量的软件，我们需要能够跟踪所有更改并在必要时将其撤消。 版本控制系统通过跟踪项目历史记录并帮助合并多人所做的更改来填补</description></item><item><title>Config ssh to Keychina</title><link>https://guzhongren.github.io/2020/01/config-ssh-to-keychina/</link><pubDate>Wed, 22 Jan 2020 15:07:49 +0800</pubDate><guid>https://guzhongren.github.io/2020/01/config-ssh-to-keychina/</guid><description>Photo by Marco Trinidad from Pexels 将生成的ssh 私钥添加到 Mac 的keychain 中 1 $ ssh-add -K .ssh/is_rsa 将登录信息配置到.ssh/config中 1 2 3 4 5 6 $ touch ~/.ssh/config $ vim ~/.ssh/config # edit text Host</description></item><item><title>[翻译]Hello,wasm Pack Cargo.toml</title><link>https://guzhongren.github.io/2019/11/%E7%BF%BB%E8%AF%91hellowasm-pack-cargo.toml/</link><pubDate>Wed, 27 Nov 2019 23:23:36 +0800</pubDate><guid>https://guzhongren.github.io/2019/11/%E7%BF%BB%E8%AF%91hellowasm-pack-cargo.toml/</guid><description>Photo by La Miko from Pexels Cargo.toml cargo.toml是Rust 包管理器 cargo 的清单文件。这个文件包 name、 version 和包的依赖，在 Rust 中，我们一般称之为 crate。 在示例</description></item><item><title>在 VSCode 上配置Rust的调试环境</title><link>https://guzhongren.github.io/2019/10/%E5%9C%A8-vscode-%E4%B8%8A%E9%85%8D%E7%BD%AErust%E7%9A%84%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/</link><pubDate>Thu, 17 Oct 2019 20:50:05 +0800</pubDate><guid>https://guzhongren.github.io/2019/10/%E5%9C%A8-vscode-%E4%B8%8A%E9%85%8D%E7%BD%AErust%E7%9A%84%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/</guid><description>Photo by Jan Kopřiva from Pexels 插件 在 VS Code 上进行 Rust 的开发，需要使用一下两个库 RLS(vscode搜索插件rls) lldb(vscode搜索插件cod</description></item><item><title>将函数放在对象的Value上，然后传给组件执行，实现组件抽象</title><link>https://guzhongren.github.io/2019/10/%E5%B0%86%E5%87%BD%E6%95%B0%E6%94%BE%E5%9C%A8%E5%AF%B9%E8%B1%A1%E7%9A%84value%E4%B8%8A%E7%84%B6%E5%90%8E%E4%BC%A0%E7%BB%99%E7%BB%84%E4%BB%B6%E6%89%A7%E8%A1%8C%E5%AE%9E%E7%8E%B0%E7%BB%84%E4%BB%B6%E6%8A%BD%E8%B1%A1/</link><pubDate>Mon, 14 Oct 2019 21:36:26 +0800</pubDate><guid>https://guzhongren.github.io/2019/10/%E5%B0%86%E5%87%BD%E6%95%B0%E6%94%BE%E5%9C%A8%E5%AF%B9%E8%B1%A1%E7%9A%84value%E4%B8%8A%E7%84%B6%E5%90%8E%E4%BC%A0%E7%BB%99%E7%BB%84%E4%BB%B6%E6%89%A7%E8%A1%8C%E5%AE%9E%E7%8E%B0%E7%BB%84%E4%BB%B6%E6%8A%BD%E8%B1%A1/</guid><description>情景 在我们开发中，我们通常需要对某一系列的组件Coding, 但我们是程序员啊，我们怎么能容忍代码重复出现的坏味道呢。所以，对于一些列相同的操</description></item><item><title>Git Revert 多条已提交的记录</title><link>https://guzhongren.github.io/2019/09/git-revert-%E5%A4%9A%E6%9D%A1%E5%B7%B2%E6%8F%90%E4%BA%A4%E7%9A%84%E8%AE%B0%E5%BD%95/</link><pubDate>Mon, 30 Sep 2019 15:52:49 +0800</pubDate><guid>https://guzhongren.github.io/2019/09/git-revert-%E5%A4%9A%E6%9D%A1%E5%B7%B2%E6%8F%90%E4%BA%A4%E7%9A%84%E8%AE%B0%E5%BD%95/</guid><description>我需要撤销最后的四个提交 image 如果用git revert * 一个一个revert 挺费劲，可以用git revert OLDER_COMMIT^..NEWER_COMMIT* 这种格式，对应我的工程就是 1 $ git revert 54b23c2251acde.....09123463e99436fba83f9^..a19a10b24b648b80401234686aac65... 这样会在log 上多</description></item><item><title>使用git迁移git项目并保留提交记录</title><link>https://guzhongren.github.io/2019/09/%E4%BD%BF%E7%94%A8git%E8%BF%81%E7%A7%BBgit%E9%A1%B9%E7%9B%AE%E5%B9%B6%E4%BF%9D%E7%95%99%E6%8F%90%E4%BA%A4%E8%AE%B0%E5%BD%95/</link><pubDate>Mon, 30 Sep 2019 15:52:49 +0800</pubDate><guid>https://guzhongren.github.io/2019/09/%E4%BD%BF%E7%94%A8git%E8%BF%81%E7%A7%BBgit%E9%A1%B9%E7%9B%AE%E5%B9%B6%E4%BF%9D%E7%95%99%E6%8F%90%E4%BA%A4%E8%AE%B0%E5%BD%95/</guid><description>场景 在平时开发中我们有自己的git仓库，组内提交都是在这个库。突然有一天，领导说要把这个库整合到另一个更大的工程中（华为云的看板），那里面有</description></item><item><title>Golang 依赖注入(Dependency Injection)</title><link>https://guzhongren.github.io/2019/09/golang-%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5dependency-injection/</link><pubDate>Tue, 10 Sep 2019 10:52:24 +0800</pubDate><guid>https://guzhongren.github.io/2019/09/golang-%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5dependency-injection/</guid><description>Dependency Injection 🧪 依赖注入是目前很多优秀框架都在使用的一个设计模式。 Dependency Injection 常常简称为：DI。它是实现控制反转（Inversion of Control – IoC）的一个模式。</description></item><item><title>Golang 基准测试(Benchmark)</title><link>https://guzhongren.github.io/2019/09/golang-%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95benchmark/</link><pubDate>Tue, 10 Sep 2019 09:56:24 +0800</pubDate><guid>https://guzhongren.github.io/2019/09/golang-%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95benchmark/</guid><description>Benchmark 🧪 基准测试是对计算机系统的性能的测试。 在程序中，基准测试，是一种测试代码性能的方法；比如有一个问题你有多种不同的方案，你想选择一种性能最好</description></item><item><title>Golang With SQLLite Practice</title><link>https://guzhongren.github.io/2019/09/golang-with-sqllite-practice/</link><pubDate>Sun, 01 Sep 2019 10:56:39 +0800</pubDate><guid>https://guzhongren.github.io/2019/09/golang-with-sqllite-practice/</guid><description>简介 目标 目的 Coding 目录结构 封装 error 函数 安装 SQLLite 库及其他库 申明 DB 全局变量 初始化数据库 用户模型构建及原子操作 用户模型 新增 删除 修改 查询 在应用中启动并调用用</description></item><item><title>Markdown 基本语法预览</title><link>https://guzhongren.github.io/2019/08/basic-markdown-preview/</link><pubDate>Sun, 25 Aug 2019 16:22:42 +0800</pubDate><guid>https://guzhongren.github.io/2019/08/basic-markdown-preview/</guid><description>&lt;p>这是一篇用于预览 :(fab fa-markdown): Markdown 基本语法的文章。&lt;/p>
&lt;p>文章内容基于 &lt;a href="https://github.github.com/gfm" target="_blank" rel="noopener noreffer">GitHub Flavored Markdown Spec&lt;/a>
。&lt;/p>
&lt;p>不包含复杂的规则说明，仅仅展示 GFM 所约定的 Markdown 基本语法。&lt;/p></description></item><item><title>K8s 1.15.0 安装记录</title><link>https://guzhongren.github.io/2019/06/k8s-1.15.0-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</link><pubDate>Sun, 30 Jun 2019 19:46:11 +0800</pubDate><guid>https://guzhongren.github.io/2019/06/k8s-1.15.0-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</guid><description>环境 hostname ip system master 192.168.33.10 CentOS7 node1 192.168.33.11 CentOS7 node2 192.168.33.12 CentOS7 node3 192.168.33.13 CentOS7 node4 192.168.33.14 CentOS7 node5 192.168.33.15 CentOS7 所有节点上操作 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40</description></item><item><title>Harbor 安装小记</title><link>https://guzhongren.github.io/2019/06/harbor-%E5%AE%89%E8%A3%85%E5%B0%8F%E8%AE%B0/</link><pubDate>Sun, 09 Jun 2019 14:32:13 +0800</pubDate><guid>https://guzhongren.github.io/2019/06/harbor-%E5%AE%89%E8%A3%85%E5%B0%8F%E8%AE%B0/</guid><description>场景 在搭建私有云环境时，我们需要将我们打包的镜像存储在局域网内，而不是把镜像推送到hub.docker.com；一方面是因为安全问题，另一方</description></item><item><title>Go Module 安装不了golang.org时的处理方式记录</title><link>https://guzhongren.github.io/2018/11/go-module-%E5%AE%89%E8%A3%85%E4%B8%8D%E4%BA%86golang.org%E6%97%B6%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F%E8%AE%B0%E5%BD%95/</link><pubDate>Thu, 01 Nov 2018 21:46:40 +0800</pubDate><guid>https://guzhongren.github.io/2018/11/go-module-%E5%AE%89%E8%A3%85%E4%B8%8D%E4%BA%86golang.org%E6%97%B6%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F%E8%AE%B0%E5%BD%95/</guid><description>1 2 3 4 5 go: golang.org/x/sys@v0.0.0-20180905080454-ebe1bf3edb33: unrecognized import path &amp;#34;golang.orgnrecognized import path &amp;#34;golang.org/x/sys&amp;#34; (https fetch: G1: dial tcp 216.239.37.1:443: conneet https://golang.org/x/sys?go-get=1: dial tcp 216.239.37.rty did not properly respond after1:443: connectex: A connection attempt failed because the connected host has failed to respoconnected party did not properly respond after a period of time, or established connection failed because connected : unrecognized import path &amp;#34;golang.host has failed to respond.) ... go:</description></item><item><title>Go Module 安装不了golang.org时的处理方式记录</title><link>https://guzhongren.github.io/2018/11/go-module-%E5%AE%89%E8%A3%85%E4%B8%8D%E4%BA%86golang.org%E6%97%B6%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F%E8%AE%B0%E5%BD%95/</link><pubDate>Thu, 01 Nov 2018 21:46:40 +0800</pubDate><guid>https://guzhongren.github.io/2018/11/go-module-%E5%AE%89%E8%A3%85%E4%B8%8D%E4%BA%86golang.org%E6%97%B6%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F%E8%AE%B0%E5%BD%95/</guid><description>1 2 3 4 5 go: golang.org/x/sys@v0.0.0-20180905080454-ebe1bf3edb33: unrecognized import path &amp;#34;golang.orgnrecognized import path &amp;#34;golang.org/x/sys&amp;#34; (https fetch: G1: dial tcp 216.239.37.1:443: conneet https://golang.org/x/sys?go-get=1: dial tcp 216.239.37.rty did not properly respond after1:443: connectex: A connection attempt failed because the connected host has failed to respoconnected party did not properly respond after a period of time, or established connection failed because connected : unrecognized import path &amp;#34;golang.host has failed to respond.) ... go:</description></item><item><title>Npm 安装git资源</title><link>https://guzhongren.github.io/2018/10/npm-%E5%AE%89%E8%A3%85git%E8%B5%84%E6%BA%90/</link><pubDate>Fri, 19 Oct 2018 19:27:23 +0800</pubDate><guid>https://guzhongren.github.io/2018/10/npm-%E5%AE%89%E8%A3%85git%E8%B5%84%E6%BA%90/</guid><description>引言 我们大多数情况下用到的包都是存放在 npmjs.com 这个网站上的，只要我们安装了Node，我们就可以使用Node自带的npm包来下载你需要的包; 但有时候</description></item></channel></rss>